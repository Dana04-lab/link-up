'use client';

import React, { useCallback, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Call, useStreamVideoClient } from '@stream-io/video-react-sdk';
import { useAuth } from '@/app/context/AuthContext';
import { toast } from 'sonner';

import HomeCard from './HomeCard';
import MeetingModal from './MeetingModal';
import { Textarea } from './ui/textarea';
import { Input } from './ui/input';
import ReactDatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

type MeetingState = 'isScheduleMeeting' | 'isJoiningMeeting' | 'isInstantMeeting' | undefined;

const MeetingTypeList = () => {
  const router = useRouter();
  const { user } = useAuth();
  const client = useStreamVideoClient();

  const [meetingState, setMeetingState] = useState<MeetingState>();
  const [callDetails, setCallDetails] = useState<Call>();
  const [values, setValues] = useState({
    dateTime: new Date(),
    description: '',
    link: '',
  });

  const meetingLink = `${process.env.NEXT_PUBLIC_BASE_URL}/meeting/${callDetails?.id}`;

  const handleChange = (field: string, value: string | Date) => {
    setValues((prev) => ({ ...prev, [field]: value }));
  };

  const createMeeting = useCallback(async () => {
    if (!client || !user) return;

    if (!values.dateTime) {
      toast('üìÖ –ö“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', {
        description: '–ö–µ–∑–¥–µ—Å—É–¥—ñ –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω —É–∞“õ—ã—Ç –ø–µ–Ω –∫“Ø–Ω “õ–∞–∂–µ—Ç.',
      });
      return;
    }

    try {
      const id = crypto.randomUUID();
      const call = client.call('default', id);
      if (!call) throw new Error('–ö–µ–∑–¥–µ—Å—É–¥—ñ “õ“±—Ä—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã');

      await call.getOrCreate({
        data: {
          starts_at: values.dateTime.toISOString(),
          custom: { description: values.description || '–ñ–µ–¥–µ–ª –∫–µ–∑–¥–µ—Å—É–¥—ñ –±–∞—Å—Ç–∞“£—ã–∑' },
        },
      });

      setCallDetails(call);

      toast.success('‚úÖ –ö–µ–∑–¥–µ—Å—É “õ“±—Ä—ã–ª–¥—ã', {
        description: values.description ? '–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –±”©–ª—ñ—Å—ñ“£—ñ–∑.' : '–°—ñ–∑ –±—ñ—Ä–¥–µ–Ω “õ–æ—Å—ã–ª–∞—Å—ã–∑.',
      });

      if (!values.description && meetingState === 'isInstantMeeting') {
        setTimeout(() => router.push(`/meeting/${call.id}`), 500);
      }
    } catch (error) {
      console.error('‚ùå “ö–∞—Ç–µ:', error);
      toast.error('“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã', { description: '–ö–µ–∑–¥–µ—Å—É–¥—ñ –±–∞—Å—Ç–∞—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã.' });
    }
  }, [client, user, values, meetingState, router]);

  const renderModals = () => (
    <>
      {/* Schedule Meeting */}
      {!callDetails ? (
        <MeetingModal
          isOpen={meetingState === 'isScheduleMeeting'}
          onClose={() => setMeetingState(undefined)}
          title="–ñ–∏–Ω–∞–ª—ã—Å “ö“±—Ä—É"
          handleClick={createMeeting}
        >
          <div className="flex flex-col gap-5">
            {/* Description */}
            <div className="flex flex-col gap-2">
              <label className="text-base text-white">–°–∏–ø–∞—Ç—Ç–∞–º–∞ “õ–æ—Å—ã“£—ã–∑</label>
              <Textarea
                className="min-h-[90px] bg-[#1C1F2E] text-white border border-gray-700 rounded-md focus-visible:ring-0 focus-visible:ring-offset-0"
                placeholder="–ö–µ–∑–¥–µ—Å—É —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã..."
                onChange={(e) => handleChange('description', e.target.value)}
              />
            </div>

            {/* DateTime Picker */}
            <div className="flex flex-col gap-2">
              <label className="text-base text-sky-300">–ö“Ø–Ω –º–µ–Ω –£–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑</label>
              <ReactDatePicker
                selected={values.dateTime}
                onChange={(date) => handleChange('dateTime', date!)}
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={15}
                timeCaption="time"
                dateFormat="MMMM d, yyyy h:mm aa"
                className="w-full px-4 py-2 bg-[#1C1F2E] text-white border border-gray-600 rounded-md focus:outline-none"
                calendarClassName="react-datepicker" // ‚úÖ classic style
                popperClassName="z-[9999]"
              />
            </div>
          </div>
        </MeetingModal>
      ) : (
        <MeetingModal
          isOpen={meetingState === 'isScheduleMeeting'}
          onClose={() => setMeetingState(undefined)}
          title="–ö–µ–∑–¥–µ—Å—É –∂–æ—Å–ø–∞—Ä–ª–∞–Ω–¥—ã"
          className="text-center"
          handleClick={() => {
            navigator.clipboard.writeText(meetingLink);
            toast.success('üìé –°—ñ–ª—Ç–µ–º–µ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ', {
              description: '–°—ñ–ª—Ç–µ–º–µ –±—É—Ñ–µ—Ä–≥–µ —Å–∞“õ—Ç–∞–ª–¥—ã.',
            });
          }}
          image="/icons/checked.svg"
          buttonIcon="/icons/copy.svg"
          buttonText="–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –∫”©—à—ñ—Ä—É"
        />
      )}

      {/* Instant Meeting */}
      <MeetingModal
        isOpen={meetingState === 'isInstantMeeting'}
        onClose={() => setMeetingState(undefined)}
        title="–ñ–µ–¥–µ–ª –∫–µ–∑–¥–µ—Å—É–¥—ñ –±–∞—Å—Ç–∞“£—ã–∑"
        className="text-center"
        buttonText="–ë–∞—Å—Ç–∞—É"
        handleClick={createMeeting}
      />

      {/* Join via Link */}
      <MeetingModal
        isOpen={meetingState === 'isJoiningMeeting'}
        onClose={() => setMeetingState(undefined)}
        title="–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑"
        className="text-center"
        buttonText="“ö–æ—Å—ã–ª—É"
        handleClick={() => router.push(values.link)}
      >
        <Input
          placeholder="https://..."
          className="border-none bg-[#252A41] text-white focus-visible:ring-0 focus-visible:ring-offset-0"
          onChange={(e) => handleChange('link', e.target.value)}
        />
      </MeetingModal>
    </>
  );

  return (
    <section className="grid grid-cols-1 gap-5 md:grid-cols-2 xl:grid-cols-4">
      <HomeCard
        img="/icons/add-meeting.svg"
        title="–ñ–∞“£–∞ –ö–µ–∑–¥–µ—Å—É"
        description="–ñ–µ–¥–µ–ª –∫–µ–∑–¥–µ—Å—É–¥—ñ –±–∞—Å—Ç–∞“£—ã–∑"
        handleClick={() => setMeetingState('isInstantMeeting')}
        className="bg-pink-300"
      />
      <HomeCard
        img="/icons/schedule.svg"
        title="–ö–µ–∑–¥–µ—Å—É –ö–µ—Å—Ç–µ—Å—ñ"
        description="–ö–µ–∑–¥–µ—Å—É–¥—ñ –∂–æ—Å–ø–∞—Ä–ª–∞“£—ã–∑"
        handleClick={() => setMeetingState('isScheduleMeeting')}
        className="bg-purple-400"
      />
      <HomeCard
        img="/icons/recordings.svg"
        title="–ñ–∞–∑–±–∞–ª–∞—Ä–¥—ã “ö–∞—Ä–∞—É"
        description="–ñ–∞–∑–±–∞–ª–∞—Ä—ã“£—ã–∑–¥—ã “õ–∞—Ä–∞–ø —à—ã“ì—ã“£—ã–∑"
        handleClick={() => router.push('/recordings')}
        className="bg-amber-200"
      />
      <HomeCard
        img="/icons/join-meeting.svg"
        title="–ë—ñ—Ä–ª–µ—Å–∫–µ–Ω –û—Ç—ã—Ä—ã—Å"
        description="–®–∞“õ—ã—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ –∞—Ä“õ—ã–ª—ã"
        handleClick={() => setMeetingState('isJoiningMeeting')}
        className="bg-blue-300"
      />

      {renderModals()}
    </section>
  );
};

export default MeetingTypeList;
